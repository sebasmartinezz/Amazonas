#ifndef TABLERO_H
#define TABLERO_H
#include "jugador.h"
#include "punto.h"
#include <list>
#define reinas 4
#define inferior -1
#define limite 10
#define jugadas 9

class tablero
{
    public:
        void imprimir_tablero();
        tablero();
        virtual ~tablero() {}
        void limpia_tablero();
        char devuelve_tablero(int fila,int columna)const;
        void carga_reinas(jugador *humano, jugador *maquina);
        void borra_reina_anterior(punto origen);
        void inserta_flecha(punto flecha);
        void carga_flechas();
        void deshace_flecha();
        bool movimiento_reinas(punto origen,punto destino)const;
        bool diagonal(punto origen, punto destino)const;
        bool vertical(punto origen, punto destino)const;
        bool horizontal(punto origen, punto destino)const;
        bool punto_ocupado(int i, int j)const;
        bool elemento_trayectoria(punto origen, punto destino)const;
        bool jugada_valida(punto origen, punto destino)const;
        bool tablero_juego_finalizado(jugador *_jugador);
        void reina_tiene_movimientos(jugador *_jugador);
        float math_espacios_perifericos(jugador *_jugador,int constante)const;
        float math_jugadas_posibles(jugador *_jugador,tablero _tablero,int constante)const;
        float evaluacion_heuristica(jugador *_jugador,tablero _tablero)const;
        int heuristica(int h);
        int origenf=0;
        int origenc=0;
        int destinof=0;
        int destinoc=0;
        int flechaf=0;
        int flechac=0;
        int negamax(tablero _tablero,int depth,int alpha,int beta,jugador *jugadorA, jugador *jugadorR);

    protected:

    private:
        char matriz_jugadas[limite][limite];
        bool movreinas[4];
        int fila,columna;
        list<punto> flechas;
        int valor_heuristica;
};
void tablero::imprimir_tablero(){
    for (int i=0;i<limite;i++){
        for (int j=0;j<limite;j++){
            cout<<devuelve_tablero(i,j)<<" ";
        }
        cout<<endl;
    }
}

tablero::tablero(){
    for (int fila=0; fila<10; fila++){
        for (int columna=0; columna<10; columna++)
            matriz_jugadas[fila][columna]='-';
    }
}

void tablero::limpia_tablero(){
    for (int fila=0; fila<10; fila++){
        for (int columna=0; columna<10; columna++)
            matriz_jugadas[fila][columna]='-';
    }
}

char tablero::devuelve_tablero(int fila,int columna)const{
    return matriz_jugadas[fila][columna];
}

void tablero::carga_reinas(jugador *humano,jugador *maquina){
    for (int i=0; i<reinas; i++){
        if (humano->valor_jugador() == 1){
            matriz_jugadas[humano->valor_fila(i)][humano->valor_columna(i)]='R';
            matriz_jugadas[maquina->valor_fila(i)][maquina->valor_columna(i)]='A';
        }else{
            matriz_jugadas[humano->valor_fila(i)][humano->valor_columna(i)]='A';
            matriz_jugadas[maquina->valor_fila(i)][maquina->valor_columna(i)]='R';
        }
    }
}

void tablero::borra_reina_anterior(punto origen){
    matriz_jugadas[origen.fila()][origen.columna()] = '-';
}

void tablero::inserta_flecha(punto flecha){
    flechas.push_back(flecha);
}
void tablero::carga_flechas(){
    list<punto>::iterator it=flechas.begin();
    while (it!=flechas.end()){
        matriz_jugadas[it->fila()][it->columna()] = 'X';
        it++;
    }
}

void tablero::deshace_flecha(){
    flechas.pop_back();
}

bool tablero::horizontal(punto origen, punto destino)const{
        if (origen.fila() == destino.fila()){
            return true;
        }
}

bool tablero::vertical(punto origen, punto destino)const{
        if (origen.columna() == destino.columna()){
            return true;
        }
}

bool tablero::diagonal(punto origen, punto destino)const{
    int i = origen.fila();
    int j = origen.columna();
    for (int n=0; n<limite; n++){
        if ((((i+n) == destino.fila()) && ((j+n) == destino.columna())) || (((i-n) == destino.fila()) && ((j-n) == destino.columna()))||(((i+n) == destino.fila()) && ((j-n) == destino.columna())) ||(((i-n) == destino.fila()) && ((j+n) == destino.columna()))){
            return true;
        }
    }
}

bool tablero::movimiento_reinas(punto origen,punto destino)const{
        if ((horizontal(origen,destino)) || (vertical(origen,destino)) || (diagonal(origen,destino))){
            return true;
        }
}

bool tablero::punto_ocupado(int i, int j)const{
    if (devuelve_tablero(i,j) != '-'){
        return true;
    }else{
        return false;
    }
}

bool tablero::elemento_trayectoria(punto origen, punto destino)const{
    int i = origen.fila();
    int j = origen.columna();
    int a = destino.fila();
    int b = destino.columna();
    bool boolean = false;
    while (!boolean){
        if ((i<a)&&(j<b)){
            i++;
            j++;
            if (punto_ocupado(i,j)){
                boolean = true;
            }
        }else if ((i>a)&&(j>b)){
            i--;
            j--;
            if (punto_ocupado(i,j)){
                boolean = true;
            }
        }else if ((i>a)&&(j<b)){
            i--;
            j++;
            if (punto_ocupado(i,j)){
                boolean = true;
            }
        }else if ((i<a)&&(j>b)){
            i++;
            j--;
            if (punto_ocupado(i,j)){
                boolean = true;
            }
        }else if ((i<a)&&(j == b)){
            i++;
            if (punto_ocupado(i,j)){
                boolean = true;
            }
        }else if ((i>a)&&(j == b)){
            i--;
            if (punto_ocupado(i,j)){
                boolean = true;
            }
        }else if ((i == a)&&(j<b)){
            j++;
            if (punto_ocupado(i,j)){
                boolean = true;
            }
        }else if ((i == a)&&(j>b)){
            j--;
            if (punto_ocupado(i,j)){
                boolean = true;
            }
        }else if ((i == a)&&(j == b)){
            return boolean;
        }
    }
    return boolean;
}

bool tablero::jugada_valida(punto origen, punto destino)const{
    if ((movimiento_reinas(origen,destino))&&(!punto_ocupado(destino.fila(),destino.columna()))&&(!elemento_trayectoria(origen,destino))){
            return true;
        }
}

void tablero::reina_tiene_movimientos(jugador *_jugador){
    for (int i=0; i<reinas; i++){
        if(((matriz_jugadas[(_jugador->valor_fila(i)-1)][(_jugador->valor_columna(i)+1)] == '-')&&(_jugador->valor_fila(i)-1 <10) && (_jugador->valor_columna(i)+1 <10)) ||
           ((matriz_jugadas[_jugador->valor_fila(i)][_jugador->valor_columna(i)+1] == '-')&&(_jugador->valor_fila(i) <10) && (_jugador->valor_columna(i)+1 <10)) ||
           ((matriz_jugadas[_jugador->valor_fila(i)+1][_jugador->valor_columna(i)+1] == '-')&&(_jugador->valor_fila(i)+1 <10) && (_jugador->valor_columna(i)+1 <10)) ||
           ((matriz_jugadas[_jugador->valor_fila(i)-1][_jugador->valor_columna(i)] == '-')&&(_jugador->valor_fila(i)-1 <10) && (_jugador->valor_columna(i) <10)) ||
           ((matriz_jugadas[_jugador->valor_fila(i)+1][_jugador->valor_columna(i)] == '-')&&(_jugador->valor_fila(i)+1 <10) && (_jugador->valor_columna(i) <10)) ||
           ((matriz_jugadas[_jugador->valor_fila(i)-1][_jugador->valor_columna(i)-1] == '-')&&(_jugador->valor_fila(i)-1 <10) && (_jugador->valor_columna(i)-1 <10)) ||
           ((matriz_jugadas[_jugador->valor_fila(i)][_jugador->valor_columna(i)-1] == '-')&&(_jugador->valor_fila(i) <10) && (_jugador->valor_columna(i)-1 <10)) ||
           ((matriz_jugadas[_jugador->valor_fila(i)+1][_jugador->valor_columna(i)+1] == '-')&&(_jugador->valor_fila(i)+1 <10) && (_jugador->valor_columna(i)+1 <10))){
                movreinas[i] = true;
        }else{
            movreinas[i]=false;
        }
    }
}

bool tablero::tablero_juego_finalizado(jugador *_jugador){
    int j=0;
    bool boolean = true;
    reina_tiene_movimientos(_jugador);
    while ((j<4) && (boolean == true)){
        if (movreinas[j] == false){
            j++;
        }else{
            boolean = false;
        }
    }
    return boolean;
}
int tablero::heuristica(int h){
    valor_heuristica = h;
}


float tablero::evaluacion_heuristica(jugador *_jugador,tablero _tablero)const{
    float aux;
    if(valor_heuristica == 1)
        aux = (math_espacios_perifericos(_jugador,2) + math_jugadas_posibles(_jugador,_tablero,10));
    else
        aux = math_espacios_perifericos(_jugador,10) + math_jugadas_posibles(_jugador,_tablero,2);
    return aux;
}

float tablero::math_espacios_perifericos(jugador *_jugador,int constante)const{
    float suma_total = 0;
    for (int i=0; i<reinas; i++){
        if((matriz_jugadas[(_jugador->valor_fila(i)-1)][(_jugador->valor_columna(i)+1)] == '-')&&(_jugador->valor_fila(i)-1 <10) && (_jugador->valor_columna(i)+1 <10)){
            suma_total += constante;
        }
        if ((matriz_jugadas[_jugador->valor_fila(i)][_jugador->valor_columna(i)+1] == '-')&&(_jugador->valor_fila(i) <10) && (_jugador->valor_columna(i)+1 <10)){
            suma_total += constante;
        }
        if ((matriz_jugadas[_jugador->valor_fila(i)+1][_jugador->valor_columna(i)+1] == '-')&&(_jugador->valor_fila(i)+1 <10) && (_jugador->valor_columna(i)+1 <10)){
            suma_total += constante;
        }
        if ((matriz_jugadas[_jugador->valor_fila(i)-1][_jugador->valor_columna(i)] == '-')&&(_jugador->valor_fila(i)-1 <10) && (_jugador->valor_columna(i) <10)){
            suma_total += constante;
        }
        if ((matriz_jugadas[_jugador->valor_fila(i)+1][_jugador->valor_columna(i)] == '-')&&(_jugador->valor_fila(i)+1 <10) && (_jugador->valor_columna(i) <10)){
            suma_total += constante;
        }
        if ((matriz_jugadas[_jugador->valor_fila(i)-1][_jugador->valor_columna(i)-1] == '-')&&(_jugador->valor_fila(i)-1 <10) && (_jugador->valor_columna(i)-1 <10)){
            suma_total += constante;
        }
        if ((matriz_jugadas[_jugador->valor_fila(i)][_jugador->valor_columna(i)-1] == '-')&&(_jugador->valor_fila(i) <10) && (_jugador->valor_columna(i)-1 <10)){
            suma_total += constante;
        }
        if ((matriz_jugadas[_jugador->valor_fila(i)+1][_jugador->valor_columna(i)+1] == '-')&&(_jugador->valor_fila(i)+1 <10) && (_jugador->valor_columna(i)+1 <10)){
            suma_total += constante;
        }
    }
    return suma_total;
}

float tablero::math_jugadas_posibles(jugador *_jugador,tablero _tablero,int constante)const{
    float contador = 0.0;
    int j = 1;
    for (int i=0; i<reinas; i++){
        while (j<10){
            if((matriz_jugadas[(_jugador->valor_fila(i)-j)][(_jugador->valor_columna(i)+j)] == '-')&&(_jugador->valor_fila(i)-j <10) && (_jugador->valor_columna(i)+j <10)){
                punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                punto destino((_jugador->valor_fila(i)-j),(_jugador->valor_columna(i)+j));
                if(!_tablero.elemento_trayectoria(origen,destino))
                    contador += constante;
            }
            if ((matriz_jugadas[_jugador->valor_fila(i)][_jugador->valor_columna(i)+j] == '-')&&(_jugador->valor_fila(i) <10) && (_jugador->valor_columna(i)+j <10)){
                punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                punto destino((_jugador->valor_fila(i)),(_jugador->valor_columna(i)+j));
                if(!_tablero.elemento_trayectoria(origen,destino))
                    contador += constante;
            }
            if ((matriz_jugadas[_jugador->valor_fila(i)+j][_jugador->valor_columna(i)+j] == '-')&&(_jugador->valor_fila(i)+j <10) && (_jugador->valor_columna(i)+j <10)){
                punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                punto destino((_jugador->valor_fila(i)+j),(_jugador->valor_columna(i)+j));
                if(!_tablero.elemento_trayectoria(origen,destino))
                    contador += constante;
            }
            if ((matriz_jugadas[_jugador->valor_fila(i)-j][_jugador->valor_columna(i)] == '-')&&(_jugador->valor_fila(i)-j <10) && (_jugador->valor_columna(i) <10)){
                punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                punto destino((_jugador->valor_fila(i)-j),(_jugador->valor_columna(i)));
                if(!_tablero.elemento_trayectoria(origen,destino))
                    contador += constante;
            }
            if ((matriz_jugadas[_jugador->valor_fila(i)+j][_jugador->valor_columna(i)] == '-')&&(_jugador->valor_fila(i)+j <10) && (_jugador->valor_columna(i) <10)){
                punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                punto destino((_jugador->valor_fila(i)+j),(_jugador->valor_columna(i)));
                if(!_tablero.elemento_trayectoria(origen,destino))
                    contador += constante;
            }
            if ((matriz_jugadas[_jugador->valor_fila(i)-j][_jugador->valor_columna(i)-j] == '-')&&(_jugador->valor_fila(i)-j <10) && (_jugador->valor_columna(i)-j <10)){
                punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                punto destino((_jugador->valor_fila(i)-j),(_jugador->valor_columna(i)-j));
                if(!_tablero.elemento_trayectoria(origen,destino))
                    contador += constante;
            }
            if ((matriz_jugadas[_jugador->valor_fila(i)][_jugador->valor_columna(i)-j] == '-')&&(_jugador->valor_fila(i) <10) && (_jugador->valor_columna(i)-j <10)){
                punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                punto destino((_jugador->valor_fila(i)),(_jugador->valor_columna(i)-j));
                if(!_tablero.elemento_trayectoria(origen,destino))
                    contador += constante;
            }
            if ((matriz_jugadas[_jugador->valor_fila(i)+j][_jugador->valor_columna(i)+j] == '-')&&(_jugador->valor_fila(i)+j <10) && (_jugador->valor_columna(i)+j <10)){
                punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                punto destino((_jugador->valor_fila(i)+j),(_jugador->valor_columna(i)+j));
                if(!_tablero.elemento_trayectoria(origen,destino))
                    contador += constante;
            }
            j++;
        }
    }
    return contador;
}

int tablero::negamax(tablero _tablero, int depth, int alpha, int beta, jugador *_jugador, jugador *oponente){
    _tablero.limpia_tablero();
    _tablero.carga_reinas(_jugador,oponente);
    _tablero.carga_flechas();
    if ((_tablero.tablero_juego_finalizado(_jugador)) || (depth == 0)){
        float h = (_tablero.evaluacion_heuristica(_jugador,_tablero) * _jugador->valor_jugador());
        return h;
    }else{
        int maximo = -1000;
        for (int i=0; i<reinas; i++){
            int j=1;
            while (j<limite){
                int m=1;
                while (m<jugadas){
                    if (m==1){
                        if ((matriz_jugadas[(_jugador->valor_fila(i)-j)][(_jugador->valor_columna(i)+j)] == '-')&&(_jugador->valor_fila(i)-j <limite) && (_jugador->valor_columna(i)+j <limite)&&(_jugador->valor_fila(i)-j >inferior)&&(_jugador->valor_columna(i)+j > inferior)){
                            punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                            punto destino((_jugador->valor_fila(i)-j),(_jugador->valor_columna(i)+j));
                            if(!_tablero.elemento_trayectoria(origen,destino)){
                                matriz_jugadas[origen.fila()][origen.columna()] = '-';
                                _jugador->modificar_reina(origen,destino);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                                    int k=1;
                                    while (k<limite){
                                        int n=1;
                                        while (n<jugadas){
                                            if (n == 1){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==2){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==3){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==4){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==5){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==6){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==7){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==8){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)-k>inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }
                                        n++;
                                        }
                                    k++;
                                    }
                                _jugador->modificar_reina(destino,origen);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                            }
                        }
                    }else if (m==2){
                        if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)+j)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)+j <limite)&&(_jugador->valor_fila(i) >inferior)&&(_jugador->valor_columna(i)+j > inferior)){
                            punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                            punto destino((_jugador->valor_fila(i)),(_jugador->valor_columna(i)+j));
                            if(!_tablero.elemento_trayectoria(origen,destino)){
                                matriz_jugadas[origen.fila()][origen.columna()] = '-';
                                _jugador->modificar_reina(origen,destino);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                                    int k=1;
                                    while (k<limite){
                                        int n=1;
                                        while (n<jugadas){
                                            if (n == 1){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==2){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==3){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==4){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==5){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==6){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==7){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==8){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)-k>inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                       if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }
                                        n++;
                                        }
                                    k++;
                                    }
                                _jugador->modificar_reina(destino,origen);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                            }
                        }
                    }else if (m==3){
                        if((matriz_jugadas[(_jugador->valor_fila(i)+j)][(_jugador->valor_columna(i)+j)] == '-')&&(_jugador->valor_fila(i)+j <limite) && (_jugador->valor_columna(i)+j <limite)&&(_jugador->valor_fila(i)+j >inferior)&&(_jugador->valor_columna(i)+j > inferior)){
                            punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                            punto destino((_jugador->valor_fila(i)+j),(_jugador->valor_columna(i)+j));
                            if(!_tablero.elemento_trayectoria(origen,destino)){
                                matriz_jugadas[origen.fila()][origen.columna()] = '-';
                                _jugador->modificar_reina(origen,destino);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                                    int k=1;
                                    while (k<limite){
                                        int n=1;
                                        while (n<jugadas){
                                            if (n == 1){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==2){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==3){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                       if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==4){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                       if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==5){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==6){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==7){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                       if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==8){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)-k>inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                       if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }
                                        n++;
                                        }
                                    k++;
                                    }
                                _jugador->modificar_reina(destino,origen);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                            }
                        }
                    }else if (m==4){
                        if((matriz_jugadas[(_jugador->valor_fila(i)+j)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)+j <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)+j >inferior)&&(_jugador->valor_columna(i) > inferior)){
                            punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                            punto destino((_jugador->valor_fila(i)+j),(_jugador->valor_columna(i)));
                            if(!_tablero.elemento_trayectoria(origen,destino)){
                                matriz_jugadas[origen.fila()][origen.columna()] = '-';
                                _jugador->modificar_reina(origen,destino);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                                    int k=1;
                                    while (k<limite){
                                        int n=1;
                                        while (n<jugadas){
                                            if (n == 1){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==2){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                       if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==3){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==4){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==5){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==6){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==7){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                       if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==8){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)-k>inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                       if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }
                                        n++;
                                        }
                                    k++;
                                    }
                                _jugador->modificar_reina(destino,origen);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                            }
                        }
                    }else if (m==5){
                        if((matriz_jugadas[(_jugador->valor_fila(i)+j)][(_jugador->valor_columna(i)-j)] == '-')&&(_jugador->valor_fila(i)+j <limite) && (_jugador->valor_columna(i)-j <limite)&&(_jugador->valor_fila(i)+j >inferior)&&(_jugador->valor_columna(i)-j > inferior)){
                            punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                            punto destino((_jugador->valor_fila(i)+j),(_jugador->valor_columna(i)-j));
                            if(!_tablero.elemento_trayectoria(origen,destino)){
                                matriz_jugadas[origen.fila()][origen.columna()] = '-';
                                _jugador->modificar_reina(origen,destino);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                                    int k=1;
                                    while (k<limite){
                                        int n=1;
                                        while (n<jugadas){
                                            if (n == 1){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==2){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                       if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==3){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==4){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==5){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==6){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==7){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==8){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)-k>inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }
                                        n++;
                                        }
                                    k++;
                                    }
                                _jugador->modificar_reina(destino,origen);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                            }
                        }
                    }else if (m==6){
                        if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)-j)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)-j <limite)&&(_jugador->valor_fila(i) >inferior)&&(_jugador->valor_columna(i)-j > inferior)){
                            punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                            punto destino((_jugador->valor_fila(i)),(_jugador->valor_columna(i)-j));
                            if(!_tablero.elemento_trayectoria(origen,destino)){
                                matriz_jugadas[origen.fila()][origen.columna()] = '-';
                                _jugador->modificar_reina(origen,destino);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                                    int k=1;
                                    while (k<limite){
                                        int n=1;
                                        while (n<jugadas){
                                            if (n == 1){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==2){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==3){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==4){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==5){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==6){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==7){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                       if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==8){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)-k>inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }
                                        n++;
                                        }
                                    k++;
                                    }
                                _jugador->modificar_reina(destino,origen);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                            }
                        }
                    }else if (m==7){
                        if((matriz_jugadas[(_jugador->valor_fila(i)-j)][(_jugador->valor_columna(i)-j)] == '-')&&(_jugador->valor_fila(i)-j <limite) && (_jugador->valor_columna(i)-j <limite)&&(_jugador->valor_fila(i)-j >inferior)&&(_jugador->valor_columna(i)-j > inferior)){
                            punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                            punto destino((_jugador->valor_fila(i)-j),(_jugador->valor_columna(i)-j));
                            if(!_tablero.elemento_trayectoria(origen,destino)){
                                matriz_jugadas[origen.fila()][origen.columna()] = '-';
                                _jugador->modificar_reina(origen,destino);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                                    int k=1;
                                    while (k<limite){
                                        int n=1;
                                        while (n<jugadas){
                                            if (n == 1){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==2){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==3){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==4){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==5){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==6){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                       if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==7){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==8){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)-k>inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                       if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }
                                        n++;
                                        }
                                    k++;
                                    }
                                _jugador->modificar_reina(destino,origen);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                            }
                        }
                    }else if (m==8){
                        if((matriz_jugadas[(_jugador->valor_fila(i)-j)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)-j <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)-j >inferior)&&(_jugador->valor_columna(i) > inferior)){
                            punto origen(_jugador->valor_fila(i),_jugador->valor_columna(i));
                            punto destino((_jugador->valor_fila(i)-j),(_jugador->valor_columna(i)));
                            if(!_tablero.elemento_trayectoria(origen,destino)){
                                matriz_jugadas[origen.fila()][origen.columna()] = '-';
                                _jugador->modificar_reina(origen,destino);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                                    int k=1;
                                    while (k<limite){
                                    int n=1;
                                        while (n<jugadas){
                                            if (n == 1){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==2){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==3){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)+k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)+k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)+k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)+k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==4){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==5){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)+k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)+k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)+k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)+k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==6){
                                                if((matriz_jugadas[(_jugador->valor_fila(i))][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i) <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)>inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==7){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i)-k)] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i)-k <limite)&&(_jugador->valor_fila(i)-k >inferior)&&(_jugador->valor_columna(i)-k > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)-k));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }else if (n==8){
                                                if((matriz_jugadas[(_jugador->valor_fila(i)-k)][(_jugador->valor_columna(i))] == '-')&&(_jugador->valor_fila(i)-k <limite) && (_jugador->valor_columna(i) <limite)&&(_jugador->valor_fila(i)-k>inferior)&&(_jugador->valor_columna(i) > inferior)){
                                                    punto flecha((_jugador->valor_fila(i)-k),(_jugador->valor_columna(i)));
                                                    if (!elemento_trayectoria(destino,flecha)){
                                                        _tablero.inserta_flecha(flecha);
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        int valor = -negamax(_tablero,depth-1,-beta,-alpha,oponente,_jugador);
                                                        _tablero.deshace_flecha();
                                                        _tablero.limpia_tablero();
                                                        _tablero.carga_flechas();
                                                        _tablero.carga_reinas(_jugador,oponente);
                                                        if (valor > maximo){
                                                            maximo = valor;
                                                            origenf = origen.fila();
                                                            origenc = origen.columna();
                                                            destinof = destino.fila();
                                                            destinoc = destino.columna();
                                                            flechaf = flecha.fila();
                                                            flechac = flecha.columna();
                                                        }
                                                        if (valor > alpha){
                                                            alpha = valor;
                                                        }
                                                        if (alpha >= beta){
                                                            _jugador->modificar_reina(destino,origen);
                                                            _tablero.limpia_tablero();
                                                            _tablero.carga_reinas(_jugador,oponente);
                                                            _tablero.carga_flechas();
                                                            return alpha;
                                                        }
                                                    }
                                                }
                                            }
                                        n++;
                                        }
                                    k++;
                                    }
                                _jugador->modificar_reina(destino,origen);
                                _tablero.limpia_tablero();
                                _tablero.carga_reinas(_jugador,oponente);
                                _tablero.carga_flechas();
                            }
                        }
                    }
                m++;
                }
            j++;
            }
        }
     return alpha;
    }
}


#endif // TABLERO_H
